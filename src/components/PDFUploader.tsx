import React, { useState, useRef, useCallback } from 'react';
import { Upload, FileText, X, Eye, Download, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { Document, Page, pdfjs } from 'react-pdf';
import { useAccessibility } from './AccessibilityProvider';

// Set up PDF.js worker
pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;

interface PDFFile {
  file: File;
  id: string;
  name: string;
  size: number;
  uploadedAt: Date;
  status: 'uploading' | 'processing' | 'completed' | 'error';
  summary?: string;
  extractedText?: string;
  pageCount?: number;
}

interface PDFUploaderProps {
  onSummaryGenerated?: (summary: string, fileName: string) => void;
  maxFileSize?: number; // in MB
  acceptedTypes?: string[];
  className?: string;
}

const PDFUploader: React.FC<PDFUploaderProps> = ({
  onSummaryGenerated,
  maxFileSize = 10,
  acceptedTypes = ['.pdf'],
  className = ''
}) => {
  const [uploadedFiles, setUploadedFiles] = useState<PDFFile[]>([]);
  const [isDragOver, setIsDragOver] = useState(false);
  const [selectedFileId, setSelectedFileId] = useState<string | null>(null);
  const [previewPageNumber, setPreviewPageNumber] = useState(1);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { addAnnouncement } = useAccessibility();

  const generateId = () => `pdf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  const extractTextFromPDF = async (file: File): Promise<{ text: string; pageCount: number }> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = async (e) => {
        try {
          const arrayBuffer = e.target?.result as ArrayBuffer;
          const pdf = await pdfjs.getDocument({ data: arrayBuffer }).promise;
          const pageCount = pdf.numPages;
          let fullText = '';

          for (let i = 1; i <= pageCount; i++) {
            const page = await pdf.getPage(i);
            const textContent = await page.getTextContent();
            const pageText = textContent.items
              .map((item: any) => item.str)
              .join(' ');
            fullText += pageText + '\n';
          }

          resolve({ text: fullText.trim(), pageCount });
        } catch (error) {
          reject(error);
        }
      };

      reader.onerror = () => reject(new Error('Failed to read PDF file'));
      reader.readAsArrayBuffer(file);
    });
  };

  const generateSummary = async (text: string, fileName: string): Promise<string> => {
    // Simulate AI summarization - replace with actual API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const wordCount = text.split(' ').length;
    const sentences = text.split('.').filter(s => s.trim().length > 0);
    const keySentences = sentences.slice(0, Math.min(5, Math.floor(sentences.length * 0.1)));
    
    return `ðŸ“„ **PDF Summary for "${fileName}"**

**Document Overview:**
- Total words: ${wordCount.toLocaleString()}
- Pages analyzed: ${Math.ceil(wordCount / 250)} (estimated)

**Key Points:**
${keySentences.map((sentence, index) => `${index + 1}. ${sentence.trim()}.`).join('\n')}

**Summary:**
This document contains ${wordCount > 1000 ? 'comprehensive' : 'concise'} information across multiple topics. The content appears to be ${wordCount > 5000 ? 'detailed and technical' : 'accessible and informative'}, making it suitable for ${wordCount > 3000 ? 'in-depth study' : 'quick reference'}.

*Generated by Netlify AI - Your intelligent document companion! ðŸ¤–*`;
  };

  const processFile = async (file: File) => {
    const fileId = generateId();
    
    const newFile: PDFFile = {
      file,
      id: fileId,
      name: file.name,
      size: file.size,
      uploadedAt: new Date(),
      status: 'uploading'
    };

    setUploadedFiles(prev => [...prev, newFile]);
    addAnnouncement(`PDF file ${file.name} uploaded successfully`);

    try {
      // Update status to processing
      setUploadedFiles(prev => 
        prev.map(f => f.id === fileId ? { ...f, status: 'processing' } : f)
      );

      // Extract text from PDF
      const { text, pageCount } = await extractTextFromPDF(file);
      
      // Generate summary
      const summary = await generateSummary(text, file.name);

      // Update file with results
      setUploadedFiles(prev => 
        prev.map(f => f.id === fileId ? {
          ...f,
          status: 'completed',
          extractedText: text,
          summary,
          pageCount
        } : f)
      );

      addAnnouncement(`PDF summary generated for ${file.name}`);
      
      if (onSummaryGenerated) {
        onSummaryGenerated(summary, file.name);
      }

    } catch (error) {
      console.error('Error processing PDF:', error);
      
      setUploadedFiles(prev => 
        prev.map(f => f.id === fileId ? { ...f, status: 'error' } : f)
      );
      
      addAnnouncement(`Error processing PDF ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const handleFileSelect = useCallback((files: FileList | null) => {
    if (!files) return;

    Array.from(files).forEach(file => {
      // Validate file type
      if (!acceptedTypes.some(type => file.name.toLowerCase().endsWith(type.toLowerCase()))) {
        addAnnouncement(`Invalid file type: ${file.name}. Please upload PDF files only.`);
        return;
      }

      // Validate file size
      if (file.size > maxFileSize * 1024 * 1024) {
        addAnnouncement(`File too large: ${file.name}. Maximum size is ${maxFileSize}MB.`);
        return;
      }

      processFile(file);
    });
  }, [acceptedTypes, maxFileSize, addAnnouncement]);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFileSelect(e.dataTransfer.files);
  }, [handleFileSelect]);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  }, []);

  const removeFile = (fileId: string) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
    if (selectedFileId === fileId) {
      setSelectedFileId(null);
    }
    addAnnouncement('PDF file removed');
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getStatusIcon = (status: PDFFile['status']) => {
    switch (status) {
      case 'uploading':
      case 'processing':
        return <Loader2 className="w-4 h-4 animate-spin text-blue-500" />;
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-500" />;
      default:
        return null;
    }
  };

  const selectedFile = uploadedFiles.find(f => f.id === selectedFileId);

  return (
    <div className={`bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 ${className}`}>
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
              <FileText className="w-5 h-5 mr-2 text-blue-600" />
              PDF Document Analyzer
            </h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Upload PDF files to get AI-powered summaries and insights
            </p>
          </div>
        </div>

        {/* Upload Area */}
        <div
          className={`relative border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200 ${
            isDragOver
              ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
              : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'
          }`}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
        >
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept={acceptedTypes.join(',')}
            onChange={(e) => handleFileSelect(e.target.files)}
            className="sr-only"
            id="pdf-upload"
          />
          
          <div className="space-y-4">
            <div className="w-16 h-16 mx-auto bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
              <Upload className="w-8 h-8 text-blue-600 dark:text-blue-400" />
            </div>
            
            <div>
              <label
                htmlFor="pdf-upload"
                className="cursor-pointer text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium"
              >
                Choose PDF files
              </label>
              <span className="text-gray-600 dark:text-gray-400"> or drag and drop them here</span>
            </div>
            
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Maximum file size: {maxFileSize}MB â€¢ Supported: {acceptedTypes.join(', ')}
            </p>
          </div>
        </div>

        {/* Uploaded Files List */}
        {uploadedFiles.length > 0 && (
          <div className="mt-6">
            <h4 className="text-md font-medium text-gray-900 dark:text-white mb-4">
              Uploaded Documents ({uploadedFiles.length})
            </h4>
            
            <div className="space-y-3">
              {uploadedFiles.map((file) => (
                <div
                  key={file.id}
                  className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600"
                >
                  <div className="flex items-center space-x-3 flex-1">
                    <div className="flex-shrink-0">
                      {getStatusIcon(file.status)}
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                        {file.name}
                      </p>
                      <div className="flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
                        <span>{formatFileSize(file.size)}</span>
                        {file.pageCount && <span>{file.pageCount} pages</span>}
                        <span className="capitalize">{file.status}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    {file.status === 'completed' && (
                      <button
                        onClick={() => setSelectedFileId(file.id)}
                        className="p-2 text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-md transition-colors"
                        aria-label={`Preview ${file.name}`}
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                    )}
                    
                    <button
                      onClick={() => removeFile(file.id)}
                      className="p-2 text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-md transition-colors"
                      aria-label={`Remove ${file.name}`}
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* PDF Preview Modal */}
        {selectedFile && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-gray-800 rounded-lg max-w-4xl max-h-[90vh] w-full overflow-hidden">
              <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  {selectedFile.name}
                </h3>
                <button
                  onClick={() => setSelectedFileId(null)}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors"
                  aria-label="Close preview"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              
              <div className="p-4 overflow-auto max-h-[calc(90vh-120px)]">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* PDF Preview */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900 dark:text-white">Document Preview</h4>
                    <div className="border border-gray-200 dark:border-gray-600 rounded-lg overflow-hidden">
                      <Document
                        file={selectedFile.file}
                        onLoadSuccess={({ numPages }) => {
                          setUploadedFiles(prev =>
                            prev.map(f => f.id === selectedFile.id ? { ...f, pageCount: numPages } : f)
                          );
                        }}
                        className="w-full"
                      >
                        <Page
                          pageNumber={previewPageNumber}
                          width={300}
                          className="mx-auto"
                        />
                      </Document>
                    </div>
                    
                    {selectedFile.pageCount && selectedFile.pageCount > 1 && (
                      <div className="flex items-center justify-center space-x-4">
                        <button
                          onClick={() => setPreviewPageNumber(Math.max(1, previewPageNumber - 1))}
                          disabled={previewPageNumber <= 1}
                          className="px-3 py-1 bg-blue-600 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700 transition-colors"
                        >
                          Previous
                        </button>
                        <span className="text-sm text-gray-600 dark:text-gray-400">
                          Page {previewPageNumber} of {selectedFile.pageCount}
                        </span>
                        <button
                          onClick={() => setPreviewPageNumber(Math.min(selectedFile.pageCount!, previewPageNumber + 1))}
                          disabled={previewPageNumber >= selectedFile.pageCount}
                          className="px-3 py-1 bg-blue-600 text-white rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700 transition-colors"
                        >
                          Next
                        </button>
                      </div>
                    )}
                  </div>
                  
                  {/* Summary */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900 dark:text-white">AI Summary</h4>
                    {selectedFile.summary ? (
                      <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 prose prose-sm dark:prose-invert max-w-none">
                        <div className="whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200">
                          {selectedFile.summary}
                        </div>
                      </div>
                    ) : (
                      <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center">
                        <Loader2 className="w-6 h-6 animate-spin mx-auto mb-2 text-blue-500" />
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          Generating AI summary...
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PDFUploader;